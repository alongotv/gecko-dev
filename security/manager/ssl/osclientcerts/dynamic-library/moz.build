# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

USE_LIBS += ["osclientcerts-static"]

SOURCES += [
    "stub.c",
]

if CONFIG["OS_ARCH"] == "WINNT":
    OS_LIBS += [
        "advapi32",
        "crypt32",
        "kernel32",
        "ncrypt",
        "userenv",
        "ws2_32",
        "ntdll",
    ]
    # Version string comparison is generally wrong, but by the time it would
    # actually matter, either bug 1489995 would be fixed, or the build would
    # require version >= 1.78.
    if CONFIG["RUSTC_VERSION"] and CONFIG["RUSTC_VERSION"] >= "1.78.0":
        OS_LIBS += [
            "synchronization",
        ]

# This is a *hack* designed specifically for this library (I found no other ways around):
# it allows to expose external C functions of static Rust library
# when compiling for Linux targets (see comment in ipcclientcerts/dynamic-library/stub.c).
if CONFIG["OS_ARCH"] == "Linux" and CONFIG["OS_TARGET"] == "Android":
    # The absolute path to static rust .a library should be wrapped with
    # these flags in the final compile command for the linking to work
    LDFLAGS += ["-Wl,--whole-archive"]
    EXTRA_DSO_LDOPTS += ["-Wl,--no-whole-archive"]

if CONFIG["OS_TARGET"] == "Android":
    OS_LIBS += ["m"]

if CONFIG["OS_ARCH"] == "Darwin":
    OS_LIBS += [
        "-framework CoreFoundation",
        "-framework Security",
    ]

SharedLibrary("osclientcerts")

NoVisibilityFlags()

if CONFIG["OS_TARGET"] == "Android":
    SYMBOLS_FILE = "osclientcerts_android.symbols"
else:
    SYMBOLS_FILE = "osclientcerts.symbols"
